# File: docker-compose.yml (Versi Final Otomatis Lengkap)

services:
  # --- 1. LAYANAN INFRASTRUKTUR INTI ---
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  # --- 2. LAYANAN CLUSTER SPARK ---

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    ports:
      - "8080:8080"
      - "4040:4040"
    volumes:
      - ./spark:/opt/bitnami/spark/app
      - ./ingestion:/ingestion # Dibutuhkan oleh setup_and_batch_job

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker
    depends_on:
      - spark-master
    volumes:
      - ./spark:/opt/bitnami/spark/app
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077

  # --- 3. APLIKASI WEB FRONTEND ---

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamlit_app
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app
    depends_on:
      - minio
      - redis
      - kafka

  # --- 4. PEKERJA OTOMATIS (AUTOMATION SERVICES) ---

  # Layanan ini hanya berjalan sekali untuk melakukan setup & training batch model
  setup_and_batch_job:
    build:
      context: ./spark
    container_name: setup_and_batch_job
    volumes:
      - ./spark:/opt/bitnami/spark/app
      - ./ingestion:/ingestion
      - ./wait-for-it.sh:/wait-for-it.sh
    depends_on:
      - minio
      - spark-master
    # Perintah ini akan: 1. Menunggu MinIO siap, 2. Menjalankan ingesti, 3. Menjalankan Spark Job Batch.
    command: >
      sh -c "chmod +x /wait-for-it.sh && \
             ./wait-for-it.sh minio -- \
             sh -c 'python /ingestion/upload_to_minio.py && \
                    python /ingestion/set_minio_policy.py && \
                    echo \"Ingesti Selesai, Memulai Spark Batch Job...\" && \
                    spark-submit \
                      --master spark://spark-master:7077 \
                      --packages org.apache.hadoop:hadoop-aws:3.3.4 \
                      /opt/bitnami/spark/app/batch/process_models.py'"
    restart: on-failure # Coba lagi jika gagal

  # Layanan ini berjalan terus-menerus untuk mengirim data streaming
  kafka_producer:
    build:
      context: ./spark/stream # Menggunakan Dockerfile khusus dari folder stream
      dockerfile: Dockerfile
    container_name: kafka_producer
    depends_on:
      - kafka
    restart: always # Akan selalu hidup kembali jika mati

  # Layanan ini berjalan terus-menerus untuk memproses data streaming
  spark_streaming_consumer:
    build:
      context: ./spark
    container_name: spark_streaming_consumer
    depends_on:
      - spark-master
      - kafka
      - redis
    command: >
      spark-submit \
        --master spark://spark-master:7077 \
        --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0 \
        /opt/bitnami/spark/app/stream/consumer.py
    restart: always